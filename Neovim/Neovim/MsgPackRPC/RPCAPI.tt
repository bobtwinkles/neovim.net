<#@ template hostspecific="true" language="C#"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)/packages/YamlDotNet.3.5.1/lib/net35/YamlDotNet.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="YamlDotNet.RepresentationModel" #>
<#
var path = Host.ResolvePath("api.yaml");
var istream = new FileStream(path, FileMode.Open);
try { // closed at the end of the file, used to ensure that the T4 engine always cleans up the open file handle
	var ireader = new StreamReader(istream);
	var yaml = new YamlStream();
	yaml.Load(ireader);
	var root = (YamlMappingNode)yaml.Documents[0].RootNode;

	var error_types = (YamlMappingNode)(root.Children[new YamlScalarNode("error_types")]);
	var types       = (YamlMappingNode)root.Children[new YamlScalarNode("types")];
	var functions   = (YamlSequenceNode)root.Children[new YamlScalarNode("functions")];
#>
// Generated from <#=  path #>
using MsgPack.Rpc.Client;
using Neovim.MsgPackRPC.Types;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Neovim.MsgPackRPC
{
	namespace Types
	{
		namespace Errors {
<#
	foreach (var type in error_types) {
		var typename = "Neovim" + type.Key + "Error";
		var val = (YamlMappingNode)(type.Value);
		var id = ((YamlScalarNode)(val.Children[new YamlScalarNode("id")])).Value;
#>
			public class <#=typename#> : System.Exception
			{
				public const int ID = <#=id#>;
				public <#=typename#>(string message) : base(message)
				{
				}
			}
<#	} #>
		}
<#
	foreach (var type in types) {
		var typename = type.Key;
		var val = (YamlMappingNode)(type.Value);
		var id = ((YamlScalarNode)(val.Children[new YamlScalarNode("id")])).Value;
#>

		public partial class <#=typename#>
		{
			public const int ID = <#=id#>;
		}
<#	} #>
	}

	public static class RPCAPI {
		// All of these functions use __client instead of the more typical 'client' in order to prevent any possible
		// naming conflicts with future versions of nvim
<#
	foreach (var function in functions) {
		var spec = ((YamlMappingNode)(function)).Children;
		var returnType = ToCSType(((YamlScalarNode)(spec[new YamlScalarNode("return_type")])).Value);

		var funcName = ((YamlScalarNode)(spec[new YamlScalarNode("name")])).Value;
		var argTypes = (YamlSequenceNode)(spec[new YamlScalarNode("parameters")]);
		var deferred = bool.Parse(((YamlScalarNode)(spec[new YamlScalarNode("deferred")])).Value);
		List<string> argStrings = new List<string>();
		argStrings.Add("RpcClient __client"); // we always need at least this parameter
		List<string> paramStrings = new List<string>();
		foreach (var arg in argTypes) {
			var argNode = (YamlSequenceNode)arg;
			var argType = ToCSType(((YamlScalarNode)(argNode.Children[0])).Value);
			var argName = ToCSName(((YamlScalarNode)(argNode.Children[1])).Value, false);
			argStrings.Add(argType + " _" + argName);
			paramStrings.Add("_" + argName);
		}
		var callMethod = "Call";
		string argString = string.Join(", ", argStrings.ToArray());
		string paramString;
		if (deferred) {
			if (returnType != "void") {
				returnType = "Task<" + returnType + ">";
			} else {
				returnType = "Task";
			}
			callMethod = "CallAsync";
			// TODO: allow users to pass context
			paramString = "\"" + funcName.ToString() + "\", parameters, null";
		} else {
			paramStrings.Insert(0, "\"" + funcName.ToString() + "\""); // we always need at least the function name
			paramString = string.Join(", ", paramStrings.ToArray());
		}
#>
		static <#=returnType#> <#=ToCSName(funcName, true)#>(<#=argString#>)
		{
<#		if (deferred) { #>
			object[] parameters = { <#=string.Join(", ", paramStrings.ToArray())#> };
<#		} #>
<# 		if (returnType == "void") { #>
			__client.<#=callMethod#>(<#=paramString #>);
<#		} else { #>
			<#=returnType#> ret;
			RPCUtils.Parse(__client.<#=callMethod#>(<#=paramString#>), out ret);
			return ret;
<#		} #>
		}

<#	}#>
	}
}<#
	} catch (Exception ex) {
		this.Write("Generation Failed: ");
		this.Write(ex.ToString());
	} finally {
		istream.Close();
	}
#>
<#+

private static readonly Dictionary<string, string> Corrections = new Dictionary<string, string>
	{
		{"Integer"		, "int"},
		{"Object"		, "string"}, // in Msgpack, objects and strings are the same thing
		{"String"		, "string"},
		{"Boolean"		, "bool"},
		{"Array"		, "string[]"},
		{"Dictionary"	, "Dictionary<string, string>"},
	};


public string CorrectType(string type) {
	if (Corrections.ContainsKey(type)) {
		return Corrections[type];
	} else {
		return type;
	}
}

public string ToCSType(string returnType) {
	if (returnType.StartsWith("ArrayOf")) {
		var realType = returnType.Split('(')[1];
		if (returnType.IndexOf(',') != -1) {
			realType = realType.Split(',')[0];
		} else {
			realType = realType.Substring(0, realType.Length - 1);
		}
		realType = CorrectType(realType);
		returnType = realType + "[]";
	}
	returnType = CorrectType(returnType);
	return returnType;
}

public string ToCSName(string name, bool uppercaseFirst) {
	string[] s = name.Split('_');
	for (int i = uppercaseFirst ? 0 : 1; i < s.Length; ++i) {
		s[i] = char.ToUpper(s[i][0]) + s[i].Substring(1);
	}
	return string.Join("", s);
}
#>